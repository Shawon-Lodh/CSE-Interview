/* Following is the program demonstrating how to find the length of linked list */

#include <stdio.h>
#include <stdlib.h>

/* First step is creation of a structure (struct node) which would contain the data types for a cell of linked list*/

struct node
{
	int data;
	struct node *next; // "next" is a pointer which will point to an address of type struct node, i.e:- pointing to another node
};

struct node* createNode(int data)
{
	struct node *temp = (struct node*)malloc(sizeof(struct node));
	
	temp->data = data;
	
	temp->next = NULL;
	
	return temp;
}

void reverselist(struct node **head_ref)
{
	struct node *prev = (*head_ref);
	struct node *curr = (*head_ref)->next;
	struct node *next1 = (*head_ref)->next->next;
	
	prev->next = NULL;
	
	while(curr!=NULL)
	{
		 next1  = curr->next;  
        curr->next = prev;   
        prev = curr;
        curr = next1;
	}
	
	(*head_ref) = prev;
	
	
	
	
}

int main()
{
	struct node *head = (struct node*)malloc(sizeof(struct node));
	
	head->data = 10;
	
	head->next = createNode(20);
	head->next->next= createNode(30);
	head->next->next->next= createNode(40);
	head->next->next->next->next= createNode(25);
	head->next->next->next->next->next= createNode(50);
	
	struct node* curr = head;
	
	while(curr!=NULL)
	{
		printf("%d ", curr->data); // printing all the node data using loop
		
		curr = curr->next;
	}
	
	printf("\n");
	
	reverselist(&head);
	
	struct node* curr1 = head;
	
	while(curr1!=NULL)
	{
		printf("%d ", curr1->data); // printing all the node data using loop
		
		curr1 = curr1->next;
	}
	return 0;
}
